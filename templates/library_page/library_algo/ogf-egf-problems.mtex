\title[]{Задачи на производящие функции}

\details[mode=main; summary=Введение] {
    Возможных задач на производящие функции на столько же много, на сколько и уравнений, поэтому единственный способ научиться их решать~--- решить (ну или прочитать разбор, если решить не получается) как можно больше уже существующих задач.
    
    Тем не менее, общие идеи решения таких задач существуют. Ниже приведены некоторые полезные идеи, о которых стоит знать, при решении подобных задач.
}

\center[]{<h2>Бесконечный рюкзак</h2>}

\details[mode=main; summary=Постановка задачи] {
    Даны $n$ типов предметов с весами $a_1$, $\ldots$, $a_n$. Предметов каждого типа бесконечно много. Также дано число $W$. Требуется для каждого $1 \le w \le W$ определить, можно ли набрать из этих предметов данный вес.
}

\details[mode=main; summary=Решение] {
    Далее мы научимся для каждого веса считать количество способов набрать данный вес. При подсчёте количества способов мы не различаем предметы одного типа. Также сразу скажем, что все $a_i$ различны, так как дубликаты можно удалить.
    
    Заметим, что:
    $$
    \frac{1}{1 - x^{a_i}} = \sum\limits_{t=0}^{\infty} x^{ta_i}
    $$
    Поэтому производящая функция последовательности $s$, где $s_w$ равно количеству способов набрать вес $w$ равна:
    $$
    \prod\limits_{i=1}^n \frac{1}{1 - x^{a_i}}
    $$
    Теперь немножко магии:
    $$
    \ln\Big(\prod\limits_{i=1}^n \frac{1}{1 - x^{a_i}}\Big) =
    \sum\limits_{i=1}^n \ln\Big(\frac{1}{1 - x^{a_i}}\Big)
    $$
    Вспомним, что $\ln(f) = \int \frac{f'}{f}$, поэтому:
    $$
    \ln\Big(\frac{1}{1 - x^{a_i}}\Big) = -\ln\Big(1 - x^{a_i}\Big)=
    $$
    $$
    =\int \frac{a_i x^{a_i - 1}}{1 - x^{a_i}}
    =\sum\limits_{t=1}^{\infty} \frac{x^{t a_i}}{t}
    $$
    Таким образом, в этом ряде есть $\frac{W}{a_i}$ ненулевых коэффициентов, которые влияют на ответ, их можно обработать наивно (все $a_i$ различны, поэтому это будет работать, как гармонический ряд).
    
    Далее от полученной суммы логарифмов берём экспоненту и получаем искомый ряд $s$. Таким образом, если $s_w = 0$, то вес $w$ набрать нельзя, иначе можно.
}

\details[mode=main; summary=Время работы] {
    Подсчёт суммы логарифмов работает за:
    $$
    \sum\limits_{i=1}^n \frac{W}{a_i}
    $$
    Так как все $a_i$ различны, это работает за \complexity$(W\log W)$. После этого от полученной суммы берётся экспонента, которая вычисляется за такую же асимптотику, поэтому суммарно алгоритм работает за \complexity$(W\log W + n)$.
}

\details[mode=main; summary=Восстановление ответа] {
    Восстановить веса, дающие в сумме $W$, оказывается не так сложно, имея последовательность $s$. Можно перебрать вес $a_i$ и, пока можно набрать вес $W - a_i$, уменьшать $W$ на $a_i$ и добавлять к ответу вес $a_i$.
    
    Может показаться, что после обработки очередного веса $a_i$ надо пересчитать последовательность $s$, но оказывается это делать не нужно, так как каждый раз мы берём максимально возможное количество предметов $i$-го типа, поэтому проверка \<<можем ли мы набрать вес $W - a_i$ из предметов с типами $\ge i$\>> равносильна проверке \<<можем ли мы набрать вес $W - a_i$ из предметов любых типов\>>.
    
    Это позволяет восстанавливать ответ за \complexity$(W + n)$.
}

\details[mode=main; summary=Реализация] {
\code[language=C++] {
/*
 * For each 0 <= w <= max_weight returns number of ways to represent w as follows:
       w = x_1 + x_2 + \ldots + x_k, x_i \in a
 * Two ways are considered different if they have different multiset of {x_i}.
 */
polynom knapsack(std::vector<int> weights, int max_weight) {
    std::sort(weights.begin(), weights.end());
    weights.resize(unique(weights.begin(), weights.end()) - weights.begin());
    polynom p(max_weight + 1);
    for (auto w : weights) {
        for (int k = w; k <= max_weight; k += w) {
            p[k] += inv[k / w];
        }
    }
    return p.exp(max_weight + 1);
}

/*
 * Returns list of weights summing up to 'weight'.
 * If it's impossible to find such list, returns an empty vector.
 */
std::vector<int> restore_weights(std::vector<int> weights, int weight) {
    auto ways = knapsack(weights, weight);
    if (ways[weight] == 0) {
        return {};
    }

    std::vector<int> result;
    for (auto w : weights) {
        while (w <= weight && ways[weight - w] != 0) {
            result.push_back(w);
            weight -= w;
        }
    }
    assert(weight == 0);
    return result;
}
}
}

\details[mode=main; summary=Задачи] {
    \item[] {Петрозаводск 2024 (лето). День 5, задача B.}
}

\center[]{<h2>Количество связных графов</h2>}

\details[mode=main; summary=Введение] {
    Это самая классическая задача, в которой возникает логарифм.
}

\details[mode=main; summary=Постановка задачи] {
    Дано число $N$. Требуется для каждого $1 \le n \le N$ посчитать количество связных графов на $n$ вершинах без петель и кратных рёбер.
}

\details[mode=main; summary=Решение] {
    Пусть $f_n$~--- количество связных графов на $n$ вершинах. Считаем, что $f_0 = 0$. За $g$ обозначим экспоненциальную производящую функцию $f$. То есть $g_n = \frac{f_n}{n!}$.
    
    Рассмотрим число $k$ и производящую функцию $q = g^k$. Распишем формально, чему равен коэффициент $q_n$:
    $$
    q_n = \sum\limits_{s_1 + \ldots + s_k = n} \prod g_{s_i}
    $$
    Если воспринимать $s_i$, как размер компоненты связности, то можно заметить, что $q$ очень напоминает экспоненциальную производящую функцию числа графов с ровно $k$ компонентами связности, так как число графов на $n$ вершинах с $k$ компонентами связности равно:
    $$
    \frac{1}{k!}\sum\limits_{s_1 + \ldots + s_k = n} {n \choose s_1, \ldots, s_k} \prod f_{s_i}=
    $$
    $$
    =
    \frac{n!}{k!}\sum\limits_{s_1 + \ldots + s_k = n} \prod \frac{f_{s_i}}{s_i!}=
    $$
    $$
    =
    \frac{n!}{k!} \sum\limits_{s_1 + \ldots + s_k = n} \prod g_{s_i}
    $$
    Коэффициент $\frac{1}{k!}$ возникает из-за того, что каждый такой граф будет посчитан $k!$ раз из-за каждой перестановки компонент связности.
    
    Таким образом, количество графов на $n$ вершинах и $k$ компонентах связности равно $\frac{n!}{k!}\cdot q_n$. Получается, что экспоненциальная производящая функция количества графов на $n$ вершинах равна:
    $$
    r = \sum\limits_{k=0}^{\infty} \frac{g^k}{k!} = \exp(g)
    $$
    Таким образом, $g = \ln(r)$. Так как $r$ найти легко обычной формулой, взяв логарифм, мы получим $g$, откуда уже найдём $f$.
}

\details[mode=main; summary=Время работы] {
    Время работы данного алгоритма совпадает со временем работы логарифма, то есть составляет \complexity$(n\log n)$.
}

\details[mode=main; summary=Замечание] {
    Данная задача так же может быть решена с помощью техники \<<разделяй и властвуй\>>. Также, можно записать рекуренту на $f_n$ и получить уравнение на $f$, которое так же приведёт к логарифму, если найти его решение.
}

\details[mode=main; summary=Реализация] {
\code[language=C++] {
// For each 1 <= k <= n returns the number of connected graphs on k vertices with no self-loops.
std::vector<mint> connected_graphs(int n) {
    polynom f(n + 1);
    for (int k = 0; k <= n; k++) {
        f[k] = mint(2).power(1ll * k * (k - 1) / 2) * ifact[k];
    }
    f = f.log(n + 1);
    for (int k = 0; k <= n; k++) {
        f[k] *= fact[k];
    }
    return f;
}
}
}

\details[mode=main; summary=Задачи] {
    \item[] {Петрозаводск 2024 (лето). День 7, задача G.}
}

\center[]{<h2>Перестановка и циклы</h2>}

\details[mode=main; summary=Введение] {
    Этот способ часто применим в задачах на комбинаторику, в которых надо рассматривать разбиения отличимых друг от друга элементов на множества. Например, разбиение вершин на компоненты связности или элементов перестановки на циклы.
    
    Так же, это один из примеров, когда действительно возникает экспонента.
}

\details[mode=main; summary=Постановка задачи] {
    Дано число $n$ и массив $c_1$, $\ldots$, $c_n$. Определим стоимость перестановки $p$ чисел $1$, $\ldots$, $n$ следующим образом:
    
    \itemize[] {
        \item[] {
            Пусть $l_1$, $\ldots$, $l_k$~--- длины циклов перестановки.
        }
        \item[] {
            Тогда стоимость перестановки равна $\prod\limits_{i=1}^k c_{l_i}$.
        }
    }
    
    Требуется найти суммарную стоимость всех перестановок длины $m$ для каждого $m$ от $1$ до $n$.
}

\details[mode=main; summary=Решение за квадрат] {
    Определим динамику следующим образом: $\mathrm{dp}_m$~--- суммарная стоимость перестановок длины $m$. Дополнительно будем считать, что $\mathrm{dp}_0 = 1$.
    
    Тогда верна следующая формула:
    $$
    \mathrm{dp}_m = \sum\limits_{k=1}^{m} \mathrm{dp}_{m-k} c_k (k-1)! {m - 1 \choose k - 1}
    $$
    В этой формуле $k$ означает длину цикла, содержащего последний элемент. Поэтому есть ${m - 1 \choose k - 1}$ способов выбрать другие элементы этого цикла и $(k-1)!$ способов расставить их по циклу. Отсюда и получается эта формула.
    
    Таким образом, такую динамику можно насчитать за \complexity$(n^2)$.
}

\details[mode=main; summary=Оптимизация через экспоненту] {
    Распишем формулу из решения за квадрат по-другому:
    $$
    \mathrm{dp}_m = \sum\limits_{k=1}^{m} \mathrm{dp}_{m-k} c_k (k-1)! {m - 1 \choose k - 1}
    $$
    $$
    \frac{\mathrm{dp}_m}{(m-1)!} = \sum\limits_{k=1}^{m} \frac{\mathrm{dp}_{m-k}}{(m-k)!} \cdot c_k
    $$
    Пусть $f$~--- производящая функция последовательности $\Big\{\frac{\mathrm{dp}_m}{m!}\Big\}_{m=0}^{\infty}$. Другими словами~--- это экспоненциальная производящая функция последовательности $\{\mathrm{dp}_m\}_{m=0}^{\infty}$.
    
    Тогда производаящая функция последовательности $\Big\{\frac{\mathrm{dp_m}}{(m-1)!}\Big\}_{m=0}^{\infty}$ равна $xf'$.
    
    Пусть $g$~--- производящая функция последовательности $\{c_k\}_{k=0}^{\infty}$ с доопределением $c_0 = 0$ и $c_k = 0$, если $k > n$.
    
    Тогда из равенства выше следует такое равенство:
    $$
    xf' = fg \implies \frac{f'}{f} = \frac{g}{x}
    $$
    Это классическое дифференциальное уравнение, у которого легко найти решение:
    $$
    \int \frac{f'}{f} = \int \frac{g}{x}
    \implies
    \ln(f) = \int \frac{g}{x}
    \implies
    f = \exp\Big(\int\frac{g}{x}\Big)
    $$
    Таким образом, для поиска $\mathrm{dp}$ достаточно взять экспоненту от $\int\frac{g}{x}$ и домножить $m$-й член на $m!$. При том $g_0 = 0$ \implies $g$ делится на $x$. Это даёт решение за \complexity$(n\log n)$.
}

\details[mode=main; summary=Замечание] {
    Так же эта задача может быть решена с помощью техники \<<разделяй и властвуй\>> за \complexity$(n\log^2 n)$.
}

\details[mode=main; summary=Задачи] {
    \item[] {\link[href=https://atcoder.jp/contests/arc134/tasks/arc134_f]{Atcoder ARC134-F}}
    \item[] {Петрозаводск 2023 (зима). День 4, задача L.}
    \item[] {Петрозаводск 2024 (лето). День 1, задача I.}
}

\center[]{<h2>Степенная сумма</h2>}

\details[mode=main; summary=Постановка задачи] {
    Дан массив $a_0$, $\ldots$, $a_{n-1}$ и число $m$. Требуется для каждого $k$ от $1$ до $m$ посчитать следующую сумму:
    $$
    \sum\limits_{t=0}^{n-1} a_tt^k
    $$ 
}

\details[mode=main; summary=Решение] {
    Заметим следующий факт:
    $$
    \frac{a_t}{1 - tx} = \sum\limits_{k=0}^{\infty} a_t t^k x^k
    $$
    Коэффициент перед $x^k$ равен вкладу $a_t$ в ответ для $k$-й степени. Поэтому было бы неплохо найти следующий ряд:
    $$
    f = \sum\limits_{t=0}^{n-1} \frac{a_t}{1 - tx}
    $$
    Если бы мы нашли $f$, то ответом для степени $k$ был бы коэффициент перед $x^k$ в $f$.
    
    Оказывается, найти $f$ не так сложно. Напишем разделяйку $\mathrm{solve}(l, r)$, которая будет возвращать два ряда $p$, $q$, удовлетворяющие равенству:
    $$
    \frac{p}{q} = \sum\limits_{t=l}^{r - 1} \frac{a_t}{1 - tx}
    $$
    Её можно реализовать следующим образом:

    \itemize[] {
        \item[] {
            Если $l + 1 = r$, то $p = a_l$ и $q = 1 - lx$.
        }
        \item[] {
            Иначе, пусть $p_l$ и $q_l$ это результат $\mathrm{solve}(l, \frac{l + r}{2})$, а $p_r$ и $q_r$~--- результат $\mathrm{solve}(\frac{l + r}{2}, r)$. Тогда результатом этого вызова будет:
            $$
            \frac{p_l}{q_l} + \frac{p_r}{q_r} = \frac{p_l q_r + p_r q_l}{q_l q_r} = \frac{p}{q}
            $$
        }
    }
    
    Таким образом, искомый ряд $f = p q^{-1}$, где $p$ и $q$~--- результат $\mathrm{solve}(0, n)$.
}

\details[mode=main; summary=Время работы] {
    Нетрудно видеть, что если $p$ и $q$~--- результат $\mathrm{solve}(l, r)$, то степень $p$ и $q$ не превосходит $r - l$. Таким образом, на каждой глубине рекурсии суммарная степень $p$ и $q$ линейна.
    
    Так как глубина рекурсии \complexity$(\log n)$ и при каждом пересчёте ответа требуется перемножить два ряда, получаем, что итоговое время работы алгоритма составляет \complexity$(n\log^2 n + m\log m)$.
}

\details[mode=main; summary=Поиск $f(e^x)$] {
    Данный алгоритм так же позволяет находить $f(e^x)$ для произвольного ряда. Это <strike>бывает нужно в задачах</strike> нужно ровно в одной задаче в мире.
    
    Заметим, что:
    $$
    a_t e^{tx} = \sum\limits_{k=0}^{\infty} \frac{a_t t^k}{k!}x^k
    $$
    Это отличается от суммы, которую мы научились искать выше только тем, что коэффициент перед $x^k$ меньше в $k!$ раз. Поэтому можно найти эту сумму, аналогично алгоритму выше, только в самом конце поделив $k$-й коэффициент на $k!$.
}

\details[mode=main; summary=Задачи] {
    \item[] {\link[href=https://atcoder.jp/contests/abc260/tasks/abc260_h]{Atcoder ABC260-Ex}}
    \item[] {\link[href=https://atcoder.jp/contests/arc154/tasks/arc154_f]{Atcoder ARC154-F}}
}

\center[]{<h2>Приложения</h2>}

\details[mode=main; summary=Ещё задачи] {
    \item[] {\link[href=https://atcoder.jp/contests/arc124/tasks/arc124_f]{Atcoder ARC124-F}}
    \item[] {\link[href=https://atcoder.jp/contests/arc136/tasks/arc136_f]{Atcoder ARC136-F}}
    \item[] {\link[href=https://atcoder.jp/contests/arc137/tasks/arc137_f]{Atcoder ARC137-F}}
    \item[] {\link[href=https://atcoder.jp/contests/abc297/tasks/abc297_h]{Atcoder ABC297-Ex}}
    \item[] {\link[href=https://codeforces.com/contest/1349/problem/F2]{Codeforces 1349-F2}}
    \item[] {\link[href=https://codeforces.com/contest/1792/problem/F2]{Codeforces 1792-F2}}
    \item[] {\link[href=https://codeforces.com/contest/1967/problem/E1]{Codeforces 1967-E1}}
    \item[] {\link[href=https://codeforces.com/gym/104164/problem/D]{Короткий тур открытой олимпиады школьников 22-23. Задача D}}
    \item[] {\link[href=https://www.codechef.com/problems/COUNTWAY]{Codechef. Count ways}}
    \item[] {\link[href=https://www.codechef.com/problems/PPARTS]{Codechef. Parts}}
    \item[] {\link[href=https://www.hackerrank.com/contests/101hack43/challenges/k-inversion-permutations/problem]{Hacker rank. K inversion permutations}}
    \item[] {\link[href=https://contest.ucup.ac/contest/1195/problem/6184]{The 1st Universal Cup. Stage 10: Zhejiang. Задача A.}}
}
