\title[]{Свёртка online}

\details[mode=main; summary=Введение] {
    Если в задаче не требуется строгий online, а он получается \<<искусственно\>>, то данная техника не нужна, так как можно написать классическую разделяйку и она будет работать столько же по времени. Я не знаю ни одной задачи, в которой возникал бы строгий online.
    
    Тем не менее, если вы любитель использовать шаблоны, данный алгоритм позволяет с добавлением минимального количества дополнительного кода оптимизировать огромное количество динамик c \complexity$(n^2)$ до \complexity$(n\log^2n)$, что обычно достаточно быстро. Тем более, данный алгоритм имеет очень маленькую константу, что позволяет без лишних усилий сдавать с помощью него задачи, в которых подразумевается решение за \complexity$(n\log n)$.
}

\center[] {<h2>Один многочлен</h2>}

\details[mode=main; summary=Постановка задачи] {
    Дан многочлен $f$. Так же есть многочлен $g$, изначально равный нулю. К $g$ постепенно добавляются члены в порядке возрастания степеней. То есть $i$-е добавление заменяет $g$ на $g + k_i x^i$, где $k_i$~--- произвольное число. После каждого такого изменения, требуется находить $[x^i](f\cdot g)$ (коэффициент перед $x^i$ в $f \cdot g$).
    
    Предполагаем, что на момент вычисления $[x^i](f \cdot g)$ последующие $k_j$ ($j > i$) ещё не даны. Такое может получиться, например, если они будут зависеть от $[x^i](f \cdot g)$.
}

\details[mode=main; summary=Решение] {
    Разобьём коэффициенты $f$ на отрезки длиной $1$, $1$, $2$, $4$, $8$, $\ldots$ Другими словами, представим $f$ в следующем виде:
    $$
    f = y_0 + x f_0 + x^2 f_1 + x^4 f_2 + \ldots
    $$
    Здесь степень $f_i$ равна $2^{i} - 1$. Предположим, что мы знаем все коэффициенты $g$, тогда формально, нам надо научиться находить:
    $$
    f\cdot g = (y_0 + x f_0 + x^2 f_1 + x^4 f_2 + \ldots) \cdot g =
    $$
    $$
    = y_0 g + \sum\limits_{i} x^{2^i} f_i g
    $$
    Предлагается отдельно посчитать каждое из слагаемых. Сначала это может показаться очень глупо, но далее интуиция появится.
    
    Слагаемое $y_0 g$ посчитаем наивно. Для слагаемого $x^{2^i}f_i g$ разобьём коэффициенты $g$ на блоки размера $2^i$. Другими словами, представим $g$ в следующем виде:
    $$
    g = g_0 + x^{2^i}g_1 + x^{2 \cdot 2^{i}} g_2 + \ldots
    $$
    Тогда нам надо найти следующий многочлен:
    $$
    x^{2^i}f_i g = \sum\limits_{j} x^{(j + 1) \cdot 2^i} f_i g_j
    $$
    Каждое такое слагаемое уже найдём наивно, то есть явно перемножим эти многочлены. Так как суммарная степень $g_j$ совпадает со степенью $g$, наивный поиск этой суммы будет работать за столько же, за сколько и поиск произведения $f_i$ на $g$, то есть быстро.
    
    Обозначим за $n$ степень $g$. Так как нам надо найти только первые $n$ коэффициентов произведения, степень $f$ можно оценивать сверху, тоже как $n$. Тогда количество ненулевых $f_i$ равно \complexity$(\log n)$. Для каждого $f_i$ алгоритм, описанный выше работает за \complexity$(n\log n)$, поэтому суммарно такой алгоритм работает за \complexity$(n\log^2 n)$.
    
    На самом деле, мы придумали такой странный алгоритм только для того, чтобы обобщить его для искомой задачи. Представим теперь, что коэффициенты $g$ поступают постепенно. Рассмотрим слагаемое:
    $$
    x^{(j + 1) \cdot 2^i} f_i g_j
    $$
    Мы сможем его найти, когда нам полностью станет известен $j$-й блок $g$. Предлагается именно в этот момент прибавить это слагаемое к произведению $f \cdot g$, которое мы будем поддерживать. Это слагаемое повлияет только на коэффициенты $\ge (j + 1) \cdot 2^i$. Если мы предполагаем, что $j$-й блок $g$ только что стал известен, это означает, что на данный момент нам интересны только коэффициенты $< (j + 1)\cdot 2^i$ в произведении, а значит, мы учли это слагаемое в произведении как раз вовермя.
    
    Таким образом, такое разбиение $f$ на отрезки было выбрано именно для того, чтобы мы успевали учесть каждое такое слагаемое. На самом деле, можно было разбить $f$ на отрезки и по-другому, но разбиение по степеням двойки минимизирует число таких отрезков, поэтому является оптимальным для нашего алгоритма.
}

\details[mode=main; summary=Время работы] {
    Описанный в решении способ поиска $f \cdot g$ работает за \complexity$(n\log^2 n)$. В обобщении этого способа для искомой задачи, мы лишь изменили порядок вычисления каждого слагаемого, поэтому время работы всё ещё осталось \complexity$(n\log^2 n)$.
}

\details[mode=main; summary=Замечание] {
    \item[] {
        Оказывается, описанный выше способ работает не идеально, хотя и довольно быстро. Суммарный размер многочленов, которые перемножаются, получается больше, чем в способе, работающим для двух изменяющихся многочленов.
    }
    \item[] {
        Данный способ можно оптимизировать, если предподсчитывать fft для отрезков многочлена $f$, но это не сильно спасает положение, так как второй способ может быть соптимизирован ещё лучше.
    }
    \item[] {
        С помощью данного способа можно обращаять ряд или искать логарифм, хотя по асимптотике это получается неэффективно.
    }
}

\details[mode=main; summary=Реализация] {
\code[language=C++] {
/*
 * T is a polynom-like class.
 * Initially g = 0 and f is given in a constructor.
 * Calling .push_back(k) makes g := g + k * x^{size(g)}.
 * .query(t) return [x^t](g * f). Require: t < size(g).
 */
template<typename T>
class convolution_online_single {
private:
    int degree = 0;
    T f, g, prod;

    void expand(int degree) {
        if (static_cast<int>(prod.size()) <= degree) {
            prod.resize(degree + 1);
        }
    }

public:
    convolution_online_single(const T &f = {}) : f(f) {}

    void push_back(typename T::value_type k) {
        g.push_back(k);
        expand(degree);
        prod[degree] += f[0] * k;
        degree++;

        for (int size = 1; size <= degree; size <<= 1) {
            if ((degree & (size - 1)) || size >= static_cast<int>(f.size())) {
                continue;
            }
            auto parts_prod = T(f.begin() + size, f.begin() + std::min<int>(f.size(), size << 1))
                            * T(g.begin() + (degree - size), g.end());
            expand(degree + parts_prod.size());
            for (int i = 0; i < static_cast<int>(parts_prod.size()); i++) {
                prod[degree + i] += parts_prod[i];
            }
        }
    }

    typename T::value_type query(int i) const {
        assert(i < degree);
        return prod[i];
    }
};
}
}

\center[] {<h2>Два многочлена</h2>}

\details[mode=main; summary=Постановка задачи] {
   Есть два многочлена $f$ и $g$, изначально равные нулю. К ним постепенно добавляются члены в порядке возрастания степеней. То есть $i$-е добавление заменяет $f$ на $f + a_i x^i$ и $g$ на $g + b_i x^i$, где $a_i$ и $b_i$~--- произвольные числа. После каждого такого изменения, требуется находить $[x^i](f\cdot g)$.
   
   Аналогично предыдущему алгоритму, предполагаем, что коэффициенты поступают online.
}

\details[mode=main; summary=Решение] {
    Это не очень сложное обобщение описанной выше техники. Опять представим, что нам заранее известны $f$ и $g$ и мы хотим найти $f \cdot g$. Разобьём и $f$, и $g$ на отрезки, аналогично описанному выше:
    $$
    f = a_0 + x f_0 + x^2 f_1 + x^4 f_2 + \ldots
    $$
    $$
    g = b_0 + x g_0 + x^2 g_1 + x^4 g_2 + \ldots
    $$
    До этого, мы отдельно умножали каждое слагаемое $x^{2^i} f_i$ на $g$. Теперь сделаем немного по-другому. Мы перемножим $x^{2^i} f_i$ со всеми коэффициентами в $g$ после $x^{2^{i+1}}$ (то есть со всеми коэффициентами сразу после блока $g_i$), а так же отдельно прибавим $x^{2\cdot 2^i} f_i g_i$. Таким образом:
    
    \itemize[] {
        \item[] {
            Если $s$ и $t$ лежат в разных степенных блоках, то пара $[x^s](f)$ и $[x^t](g)$ внесёт свой вклад, благодаря произведению более левого блока, в котором лежит $s$ или $t$, со всеми старшими степенями другого многочлена.
        }
        \item[] {
            Если $s$ и $t$ лежат в одном и том же блоке, то пара $[x^s](f)$ и $[x^t](g)$ внесёт свой вклад, благодаря тому, что мы отдельно прибавили $x^{2\cdot 2^i} f_i g_i$.
        }
    }
    
    Таким образом, каждая пара внесёт свой вклад в произведение.
    
    Чтобы каждая пара внесла свой вклад вовремя, достаточно аналогично предыдущему алгоритму умножать $x^{2^i} f_i$ на блоки коэффициентов $g$ размера $2^i$. Само собой, мы должны учесть каждое слагаемое сразу, как только все его коэффициенты стали известны.
}

\details[mode=main; summary=Время работы] {
    Время работы относительно предыдущего алгоритма очевидно не изменилось, поэтому данное обобщение работает за \complexity$(n\log^2 n)$.
}

\details[mode=main; summary=Реализация] {
\code[language=C++] {
/*
 * T is a polynom-like class.
 * Initially f = 0 and g = 0.
 * Calling .push_back(a, b) makes:
       f := f + a * x^{size(f)}
       g := g + b * x^{size(g)}
 * .query(i) return [x^i](f * g). Require: i < size(f).
 */
template<typename T>
class convolution_online {
private:
    int degree = 0;
    T prod, f, g;

    void expand(int degree) {
        if (static_cast<int>(prod.size()) <= degree) {
            prod.resize(degree + 1);
        }
    }

public:
    void push_back(typename T::value_type a, typename T::value_type b) {
        f.push_back(a);
        g.push_back(b);
        expand(degree);
        prod[degree] += f[0] * g[degree] + (degree == 0 ? 0 : f[degree] * g[0]);
        degree++;

        for (int size = 1; size <= degree; size *= 2) {
            if (degree & (size - 1)) {
                continue;
            }
            if (size == degree) {
                T cur = T(f.begin() + size / 2, f.end()) * T(g.begin() + size / 2, g.end());
                expand(degree + size - 1);
                for (int i = 0; i < size - 1; i++) {
                    prod[degree + i] += cur[i];
                }
            } else if (degree >= size * 3) {
                expand(degree + size * 2 - 1);
                for ([[maybe_unused]] int _ = 0; _ < 2; _++) {
                    T cur = T(f.begin() + size, f.begin() + 2 * size) * T(g.end() - size, g.end());
                    for (int i = 0; i < size * 2 - 1; i++) {
                        prod[degree + i] += cur[i];
                    }
                    swap(f, g);
                }
            }
        }
    }

    typename T::value_type query(int i) const {
        assert(i < degree);
        return prod[i];
    }
};
}
}

\details[mode=main; summary=Более эффективный способ] {
    Алгоритм, описанные выше не является самым эффективным по суммарному размеру многочленов, которые надо умножать. Рассмотрим алгоритм, который оптимизирует эту величину, а как следствие и константный фактор решения. На практике, описанный ниже алгоритм работает сильно быстрее, если написать его аккуратно.
    
    Опять представим, что мы знаем $f$ и $g$ и они имеют размер $2^k$. Давайте напишем разделяйку $\mathrm{solve}(l, r)$. При вызове $\mathrm{solve}(l, r)$ мы будем гарантировать, что все пары $[x^s](f)$ и $[x^t](g)$, что $s, t < l$ и $s + t < r$, уже учтены в произведении. После завершения этой функции, будем гарантировать, что учтены все пары, что $s, t < r$ и $s + t < r$. Таким образом, чтобы посчитать произведение, надо вызвать $\mathrm{solve}(0, 2^k)$.
    
    Реализуем $\mathrm{solve}(l, r)$ следующим образом:
    
    \itemize[] {
        \item[] {
            Если $r - l = 1$, то надо учесть пары $(0, l)$ и $(l, 0)$. Если $l=0$, то надо учесть лишь одну пару.
        }
        \item[] {
            Иначе, пусть $m = \frac{l + r}{2}$. Сначала вызовем $\mathrm{solve}(l, m)$, тем самым забудем про пары с суммой $< m$. Теперь, с помощью одного умножения учтём все пары, что $0 \le s < \min(r - l, m)$ и $l \le t < m$. Аналогично, учтём все симметричные пары. Важно, что мы игнорируем пары с суммой $\ge r$, так как мы учтём их позже.
            
            Теперь, нетрудно видеть, что все пары $(s, t)$, что $s, t < m$ и $s + t < r$ учтены, поэтому достаточно вызвать $\mathrm{solve}(m, r)$.
        }
    }
    
    Такой способ всё ещё работает за \complexity($n\log^2 n$). Если делать описанные выше умножения, как только все коэффициенты соответствующих отрезков многочленов стали известны, то нетрудно проверить, что все пары учтутся вовремя, поэтому с помощью этой идеи действительно можно решать искомую задачу.
    
    Чтобы этот алгоритм работал быстро, при учёте всех пар $0 \le s < r - l$ и $l \le t < m$, заметим, что нам не обязательно дополнять многочлены до степени двойки, равной $2(r - l)$, чтобы вычислять $\mathrm{fft}$. Достаточно дополнить до $r - l$. Как известно, степени полученного произведения в этом случае возьмутся по модулю $r - l$. То есть, коэффициент перед $x^i$ в настоящем произведении прибавится к коэффициенту перед $x^{i \bmod (r - l)}$ в полученном произведении. В данном случае, это означает, что первые $m - l$ коэффициентов будут испорчены. Но оказывается, что от произведения важны только коэффициенты перед большими степенями, поэтому наш алгоритм всё равно отработает правильно.
    
    Также, заметим, что мы много раз вызвали $\mathrm{fft}$ от первых $r - l$ коэффициентов каждого из многочленов, поэтому его можно предподсчитать. Так же, при учёте таких коэффициентов можно вызвать только одно обратное $\mathrm{fft}$, если сложить два вектора, которые надо обратить.
    
    Для лучшего понимания советую посмотреть приведённую ниже реализацию.
}

\details[mode=main; summary=Реализация] {
\code[language=C++] {
/*
 * T is a polynom-like class.
 * Initially f = 0 and g = 0.
 * Calling .push_back(a, b) makes:
       f := f + a * x^{size(f)}
       g := g + b * x^{size(g)}
 * .query(i) return [x^i](f * g). Require: i < size(f).
 */
template<typename T>
class convolution_online {
private:
    int degree = 0;
    T prod, f, g, aux_f, aux_g;
    std::vector<T> fft_f, fft_g;

    void expand(int degree) {
        if (static_cast<int>(prod.size()) <= degree) {
            prod.resize(degree + 1);
        }
    }

public:
    void push_back(typename T::value_type a, typename T::value_type b) {
        f.push_back(a);
        g.push_back(b);
        expand(degree);
        prod[degree] += f[0] * g[degree] + (degree == 0 ? 0 : f[degree] * g[0]);
        degree++;

        for (int size = 1, l = 0; size <= degree; size <<= 1, l++) {
            if ((degree & ((size << 1) - 1)) != size) {
                continue;
            }
            if (size == degree) {
                if (size == 1) {
                    continue;
                }
                T cur = T(f.begin(), f.end()) * T(g.begin(), g.end());
                expand(degree + size - 1);
                for (int i = 0; i < size - 1; i++) {
                    prod[degree + i] += cur[degree + i];
                }
            } else {
                if (degree == 3 * size) {
                    fft_f.emplace_back(f.begin(), f.begin() + (size << 1));
                    fft_g.emplace_back(g.begin(), g.begin() + (size << 1));
                    T::fft(fft_f.back());
                    T::fft(fft_g.back());
                }

                aux_f.assign(size << 1, 0);
                aux_g.assign(size << 1, 0);
                std::copy(f.end() - size, f.end(), aux_f.begin());
                std::copy(g.end() - size, g.end(), aux_g.begin());
                T::fft(aux_f);
                T::fft(aux_g);
                for (int i = 0; i < (size << 1); i++) {
                    aux_f[i] = fft_g[l][i] * aux_f[i] + fft_f[l][i] * aux_g[i];
                }
                T::inv_fft(aux_f);

                expand(degree + size - 1);
                for (int i = 0; i < size; i++) {
                    prod[degree + i] += aux_f[size + i];
                }
            }
        }
    }

    typename T::value_type query(int i) const {
        assert(i < degree);
        return prod[i];
    }
};
}
}

\center[] {<h2>Приложения</h2>}

\details[mode=main; summary=Задачи] {
    \item[] {\link[href=https://codeforces.com/contest/553/problem/E]{Codeforces 553-E}}
    \item[] {\link[href=https://codeforces.com/problemset/problem/1792/F2]{Codeforces 1792-F2}}
    \item[] {\link[href=https://atcoder.jp/contests/abc213/tasks/abc213_h]{Atcoder ABC213-H}}
    \item[] {\link[href=https://atcoder.jp/contests/abc315/tasks/abc315_h]{Atcoder ABC315-Ex}}
    \item[] {\link[href=https://csacademy.com/contest/round-24/task/colored-forests/]{CS academy. Colored forests}}
    \item[] {\link[href=https://csacademy.com/contest/round-9/task/jetpack]{CS academy. Jetpack}}
}
