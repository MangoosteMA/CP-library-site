\title[]{КСС ofline}

\details[mode=main; summary=Постановка задачи] {
    Дан пустой ориентированный граф на $n$ вершинах. В граф постепенно добавляются $m$ рёбер. После каждого добавленного ребра требуется находить количество компонент сильной связности (далее КСС).

    На самом деле после каждого добавленного ребра мы будем явно находить, какие КСС надо объединить, поэтому можно считать и более сложные функции, зависящие от КСС. Например, если построить минимальный остовный лес этих объединений (где вес объединения равен номеру ребра, которое вызвало это объединение), то минимум на пути между вершинами $v$ и $u$ равен первому моменту времени, когда вершины $v$ и $u$ стали принадлежать одной КСС.
}

\details[mode=main; summary=Теория] {
    Напишем функцию $solve(l, r, e)$, которая будет находить ответ для всех рёбер от $l$ до $r$, зная, что только рёбра из массива $e$ могут влиять на КСС. Более того, после завершения этой функции все вершины, принадлежащие одной КСС объединяются в одну.
    
    Для решения задачи соответственно надо вызвать $solve(1, m, e)$, где $e$ содержит все $m$ рёбер.
    
    Если $l=r$, то можно использовать любой алгоритм для поиска КСС.
    
    Иначе выделим КСС, добавив в граф только рёбра из $e$ с индексами $\le \lfloor \frac{l + r}{2} \rfloor = k$. Теперь, чтобы посчитать ответ для рёбер от $l$ до $k$ достаточно вызвать $solve(l, k, e_l)$, где $e_l$ это все рёбра с индексами $\le k$, соединяющие две вершины из одной КСС, так как другие рёбра точно не повлияют на КСС.
    
    Чтобы посчитать ответ для рёбер с индексами от $k+1$ до $r$ достаточно вызвать $solve(k + 1, r, e_r)$, где $e_r = e \setminus e_l$. Этих рёбер достаточно, так как все остальные рёбра, обработанные в $solve(l, k, e_l)$ будут петлями, так как их концы лежат в одной КСС \implies они будут объединены в одну вершину.
}

\details[mode=main; summary=Время работы] {
    Если выделять КСС на $k$ рёбрах за \complexity$(k)$, а не за \complexity$(n + k)$, то данный алгоритм будет работать за \complexity$(m\log m + n)$, так как глубина рекурсии равна $\log m$ и на каждой глубине каждое ребро встречается ровно один раз, поэтому на каждой глубине код суммарно отработает за \complexity$(m)$, что и даёт \complexity$(m\log m + n)$.
}

\details[mode=main; summary=Детали реализации] {
    \item[] {
        Для поиска КСС удобно сделать все массивы глобальными и очищать только элементы, соответствующие концу одного из рёбер.
    }
    \item[] {
        Для объединения двух вершин в одну можно использовать систему непересекающихся множеств.
    }
    \item[] {
        Чтобы случаи $l=r$ и $l < r$ не отличались можно в случае $l=r$ выделить КСС используя все рёбра из $e$, которые ещё не стали петлями. Теперь можно удалить все рёбра, соединяющие разные КСС и передать их в оба рекурсивных вызова. Хотя это и ломает инвариант, что каждое ребро передаётся ровно в один рекурсивный вызов, но на асимптотику это не влияет, так как либо после рекурсивного вызова от левой половины ребро стало петлёй, либо в рекурсивном вызове от правой половины оно не передастся глубже.
    }
}

\details[mode=main; summary=Реализация] {
\code[language=C++] {
/*
Type T is disjoin_set_union like class with:
    - constructor(vertices)
    - unite(v, u) (must return true if v and u were united)
    - root(v) (root vertex of component of vertex v)
*/
template<typename T>
class scc_ofline {
private:
    struct edge {
        int from, to;
    };

    int n;
    std::vector<edge> edges;

    std::vector<std::vector<int>> g;
    int v_num, scc_num;
    std::vector<int> num, low, scc, st;

    void tarjan(int v) {
        st.push_back(v);
        num[v] = low[v] = v_num++;
        for (auto u : g[v]) {
            if (num[u] == -1) {
                tarjan(u);
                low[v] = std::min(low[v], low[u]);
            } else if (scc[u] == -1) {
                low[v] = std::min(low[v], num[u]);
            }
        }

        if (num[v] == low[v]) {
            while (true) {
                int u = st.back();
                st.pop_back();
                scc[u] = scc_num;
                if (u == v) {
                    break;
                }
            }
            scc_num++;
        }
    }

    void solve(int l, int r, const std::vector<int> &eset, T &dsu,
               std::vector<std::vector<std::pair<int, int>>> &unions) {
        v_num = scc_num = 0;
        for (auto i : eset) {
            if (i >= r) {
                continue;
            }
            for (auto v : {dsu.root(edges[i].from), dsu.root(edges[i].to)}) {
                g[v].clear();
                num[v] = low[v] = scc[v] = -1;
            }
        }

        for (auto i : eset) {
            if (i < r) {
                int v = dsu.root(edges[i].from);
                int u = dsu.root(edges[i].to);
                if (v != u) {
                    g[v].push_back(u);
                }
            }
        }

        for (auto i : eset) {
            if (i <= r) {
                int v = dsu.root(edges[i].from);
                if (num[v] == -1) {
                    tarjan(v);
                }
            }
        }

        std::vector<int> neset;
        neset.reserve(eset.size());

        for (auto i : eset) {
            if (i < r) {
                int v = dsu.root(edges[i].from);
                int u = dsu.root(edges[i].to);
                if (v != u && scc[v] == scc[u]) {
                    neset.push_back(i);
                }
            }
        }

        if (r - l > 1) {
            int m = (l + r) / 2;
            solve(l, m, neset, dsu, unions);
            solve(m, r, neset, dsu, unions);
            return;
        }

        for (auto i : neset) {
            if (dsu.unite(edges[i].from, edges[i].to)) {
                unions[l].emplace_back(edges[i].from, edges[i].to);
            }
        }
    }

public:
    scc_ofline(int n = 0) : n(n), g(n), num(n), low(n), scc(n) {}

    // Adds directed edge (from -> to)
    void add(int from, int to) {
        edges.push_back({from, to});
    }

    // For each edge returns list of unions of scc caused by it.
    std::vector<std::vector<std::pair<int, int>>> solve() {
        T dsu(n);
        std::vector<std::vector<std::pair<int, int>>> unions(edges.size());

        std::vector<int> eset(edges.size());
        std::iota(eset.begin(), eset.end(), 0);

        solve(0, edges.size(), eset, dsu, unions);
        return unions;
    }
};
}
}

\center[]{<h2>Приложения</h2>}

\details[mode=main; summary=Пример использования] {
    Данный код выводит сумму квадратов размеров всех КСС по всем компонентам, чей размер больше $1$, после добавления каждого из рёбер.
\code[language=C++] {
#include <bits/stdc++.h>
using namespace std;

/*
Type T is disjoint_set_union like class with:
    - constructor(vertices)
    - unite(v, u) (must return true if v and u were united)
    - root(v) (root vertex of component of vertex v)
*/
template<typename T>
class scc_ofline {
private:
    struct edge {
        int from, to;
    };

    int n;
    std::vector<edge> edges;

    std::vector<std::vector<int>> g;
    int v_num, scc_num;
    std::vector<int> num, low, scc, st;

    void tarjan(int v) {
        st.push_back(v);
        num[v] = low[v] = v_num++;
        for (auto u : g[v]) {
            if (num[u] == -1) {
                tarjan(u);
                low[v] = std::min(low[v], low[u]);
            } else if (scc[u] == -1) {
                low[v] = std::min(low[v], num[u]);
            }
        }

        if (num[v] == low[v]) {
            while (true) {
                int u = st.back();
                st.pop_back();
                scc[u] = scc_num;
                if (u == v) {
                    break;
                }
            }
            scc_num++;
        }
    }

    void solve(int l, int r, const std::vector<int> &eset, T &dsu,
               std::vector<std::vector<std::pair<int, int>>> &unions) {
        v_num = scc_num = 0;
        for (auto i : eset) {
            if (i >= r) {
                continue;
            }
            for (auto v : {dsu.root(edges[i].from), dsu.root(edges[i].to)}) {
                g[v].clear();
                num[v] = low[v] = scc[v] = -1;
            }
        }

        for (auto i : eset) {
            if (i < r) {
                int v = dsu.root(edges[i].from);
                int u = dsu.root(edges[i].to);
                if (v != u) {
                    g[v].push_back(u);
                }
            }
        }

        for (auto i : eset) {
            if (i <= r) {
                int v = dsu.root(edges[i].from);
                if (num[v] == -1) {
                    tarjan(v);
                }
            }
        }

        std::vector<int> neset;
        neset.reserve(eset.size());

        for (auto i : eset) {
            if (i < r) {
                int v = dsu.root(edges[i].from);
                int u = dsu.root(edges[i].to);
                if (v != u && scc[v] == scc[u]) {
                    neset.push_back(i);
                }
            }
        }

        if (r - l > 1) {
            int m = (l + r) / 2;
            solve(l, m, neset, dsu, unions);
            solve(m, r, neset, dsu, unions);
            return;
        }

        for (auto i : neset) {
            if (dsu.unite(edges[i].from, edges[i].to)) {
                unions[l].emplace_back(edges[i].from, edges[i].to);
            }
        }
    }

public:
    scc_ofline(int n = 0) : n(n), g(n), num(n), low(n), scc(n) {}

    // Adds directed edge (from -> to)
    void add(int from, int to) {
        edges.push_back({from, to});
    }

    // For each edge returns list of unions of scc caused by it.
    std::vector<std::vector<std::pair<int, int>>> solve() {
        T dsu(n);
        std::vector<std::vector<std::pair<int, int>>> unions(edges.size());

        std::vector<int> eset(edges.size());
        std::iota(eset.begin(), eset.end(), 0);

        solve(0, edges.size(), eset, dsu, unions);
        return unions;
    }
};

class disjoint_set_union {
private:
    long long value = 0;
    std::vector<int> f;

    static long long eval(int size) {
        return size == 1 ? 0 : (long long) size * size;
    }

public:
    disjoint_set_union(int n) : value(0), f(n, -1) {}

    int root(int v) {
        return f[v] < 0 ? v : f[v] = root(f[v]);
    }

    bool unite(int v, int u) {
        v = root(v), u = root(u);
        if (v == u) {
            return false;
        }

        if (f[v] > f[u]) {
            std::swap(v, u);
        }
        value += eval(-f[v] - f[u]) - eval(-f[v]) - eval(-f[u]);
        f[v] += f[u];
        f[u] = v;
        return true;
    }

    long long query() const {
        return value;
    }
};

int main() {
    cin.tie(nullptr)->sync_with_stdio(false);

    int n, m;
    cin >> n >> m;

    scc_ofline<disjoint_set_union> scc(n);
    for (int i = 0; i < m; i++) {
        int from, to;
        cin >> from >> to;
        scc.add(from - 1, to - 1);
    }

    auto unions = scc.solve();
    disjoint_set_union dsu(n);
    for (int i = 0; i < m; i++) {
        for (auto [v, u] : unions[i]) {
            dsu.unite(v, u);
        }
        cout << dsu.query() << '\n';
    }
}
}
}

\details[mode=main; summary=Задачи] {
    \item[] {\link[href=https://codeforces.com/contest/1989/problem/F]{Codeforces 1989-F}}
    \item[] {\link[href=https://docs.yandex.ru/docs/view?url=ya-disk-public%3A%2F%2F9aLM9E8QGBIlj2etI3aNwjO4%2B83bFZXkMOjxf3y7ZF5EHXSA6w5oKCPAwRZpS9EAq%2FJ6bpmRyOJonT3VoXnDag%3D%3D&name=XIX%20Open%20Cup.%20Stage%201.%20Grand%20Prix%20of%20Zheijang.pdf&nosw=1]{Петрозаводск 2018. День 8: Yuhao Du Contest 5. Задача L}}
}
