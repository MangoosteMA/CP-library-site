\title[]{КСС}

\details[mode=main; summary=Постановка задачи] {
    Дан ориентированный граф из $n$ вершин и $m$ рёбер. Хочется научиться описывать все пары вершин $v$ и $u$, что $v$ достижима из $u$ и $u$ достижима из $v$. В целом, мы научимся более явно описывать достижимость вершин, в том числе находить вершины, из которых достижимы все остальные.
    
    Назовём две вершины $v$ и $u$ сильно связными, если $v$ достижима из $u$ и наоборот. Оказывается, что это отношение эквивалентности, то есть можно разбить все вершины на непересекающиеся множества $S_1$, $S_2$, $\ldots$, $S_k$, что любые две вершины из одного множества сильно связны, а любые две вершины из разных множеств не сильно связны.
    
    Далее мы научимся находить эти множества. Они и называются компонентами сильной связности (КСС).
}

\details[mode=main; summary=Сжатие КСС] {
    Предположим, что мы выделили КСС. Сжатием КСС называется объединение всех вершин из одной КСС в одну вершину. Изучим подробнее данный граф.
    
    Заметим, что сжатый граф ацикличен (другими славами это ДАГ), так как если существует цикл, то все вершины на нём сильно связны, а значит цикла существовать не может.
    
    Заметим ещё один факт про этот ДАГ: чтобы проверить что вершина $u$ достижима из вершины $v$ достаточно проверить, что вершина сжатого графа, соответствующая вершине $u$, достижима из вершины, соответствующей вершине $v$.
    
    Зная это, например, можно искать все вершины, из которых достижимы все остальные. Для этого достаточно проверить, что в даге только один исток (вершина, в которую не ведёт ни одно ребро). Тогда из всех вершин исходного графа, соответствующих этому истоку, достижимы все остальные. Если истоков больше одного, то таких вершин не существует.
    
    Из аналогичных рассуждений, например следует, что минимальное количество вершин, которые надо выделить, чтобы каждая вершина была достижима хотя бы из одной выделенной вершины равно количество истоков.
}

\center[]{<h2>Алгоритм Косарайю</h2>}

\details[mode=main; summary=Теория] {
    Как было описано выше, если сжать КСС, то граф будет ацикличным. А это значит, что у него существует топологическая сортировка. Научимся находить подобную топологическую сортировку в исходном графе. Мы научимся находить такой порядок вершин $p_1$, $p_2$, $\ldots$, $p_n$, что если ребро $v \to u$ соединяет две вершины из разных КСС, то хотя бы одна вершина из КСС вершины $v$ находится правее вершины $u$ в порядке $p$.
    
    Для нахождения такого порядка можно использовать обычный dfs. А именно, скажем, что изначально $p=[]$. Далее перебирём вершины в любом порядке и, если вершина ещё не посещена, запустим от неё dfs. Внутри dfs, как обычно, сначала рекурсивно запускаемся от всех непосещённых соседей. После этого добавляем вершину $v$ в конец $p$.
    
    Нетрудно видеть, что построенный порядок вершин $p$ действительно удовлетворяет условиям описанным выше.

    \details[summary=Доказательство] {
        Для доказательства предположим, что вершина $v$~--- это первая вершина из её КСС, которая была посещена dfs'ом. Тогда она будет правее всех вершин, которые из неё достижимы, так как мы выйдем из dfs'а только после того, как все эти вершины будут посещены. Таким образом они добавятся до вершины $v$. Из этого факта уже не сложно следует исходное свойство. \qed
    }

    Теперь рассмотрим вершину $p_n$. Заметим, что её КСС обязательно является истоком. Так как если это не так, то нарушается свойство, доказанное ранее. Теперь давайте развернём все рёбра исходного графа и запустим от неё dfs. Нетрудно видеть, что он посетит все вершины из её КСС и только их.

    \details[summary=Доказательство] {
        Заметим, что если этот dfs посетил вершину $v$, то в исходном графе из вершины $v$ была достижима вершина $p_n$ (так как от вершины $p_n$ существует путь до вершины $v$ по развёрнутым рёбрам). Из этого следует, что данный dfs не мог посетить вершины не из КСС вершины $v$, так как КСС вершины $v$ это исток.
        
        Но в то же время, из всех вершин КСС вершины $p_n$ эта вершина достижима, значит они будут посещены. Это завершает доказательство.\qed
    }
    
    Таким образом, мы выделили одну КСС. Давайте удалим её из графа. На этом этапе можно было бы запустить всё заново, но это было бы очень долго. Вместо этого заметим, что если мы удалим все вершины этой КСС из порядка $p$, то он опять будет удовлетворять свойству, описанному выше. А значит, для выделения всех КСС достаточно пройти по $p$ в обратном порядке и, если текущая вершина ещё не удалена, запустить от неё dfs на развёрнутом графе, без учёта уже удалённых вершин.
}

\details[mode=main; summary=Время работы] {
    Так как явно вершины из графа можно не удалять, достаточно лишь помечать, что они удалены и не учитывать их при переборе, этот алгоритм можно реализовать за \complexity$(n + m)$, так как это суммарное время работы всех запусков dfs'ов.
}

\details[mode=main; summary=Замечание] {
    \item[] {
        Если при выделении очередной КСС присваивать ей минимальный свободный номер, то если вершина $u$ достижима из вершины $v$, то номер КСС вершины $v$ $\le$ номеру КСС вершины $u$. Это свойство иногда удобно использовать (например на нём основан алгоритм 2-sat).
    }
    
    \item[] {
        В интернете гуляет другая реализация этого алгоритма, где для поиска порядка $p$ dfs запускаются на развёрнутом графе, а для выделения самих КСС~--- на прямом. Нетрудно видеть, что эти два алгоритма эквивалентны, но в неравенстве выше неравенство $\le$ заменятся на $\ge$, что не очень логично с точки зрения порядков. Поэтому будте осторожны.
    }
}

\details[mode=main; summary=Реализация] {
\code[language=C++] {
class strongly_connected_components {
private:
    int n;
    std::vector<std::vector<int>> g;
    std::vector<std::vector<int>> ig;

    std::vector<bool> used;
    std::vector<int> ord;

    int cur_scc = 0;
    std::vector<int> scc;

    void dfs_topsort(int v) {
        used[v] = true;
        for (auto u : g[v]) {
            if (!used[u]) {
                dfs_topsort(u);
            }
        }
        ord.push_back(v);
    }

    void dfs_scc(int v) {
        scc[v] = cur_scc;
        for (auto u : ig[v]) {
            if (scc[u] == -1) {
                dfs_scc(u);
            }
        }
    }

public:
    strongly_connected_components(int n = 0) : n(n), g(n), ig(n) {}

    // Adds directed edge (from -> to)
    void add(int from, int to) {
        g[from].push_back(to);
        ig[to].push_back(from);
    }

    // Returns for each vertex its scc index (0-indexed).
    // If u is reachable from v, then scc_index[v] <= scc_index[u].
    std::vector<int> solve() {
        used.assign(n, false);
        ord.clear();
        for (int v = 0; v < n; v++) {
            if (!used[v]) {
                dfs_topsort(v);
            }
        }
        std::reverse(ord.begin(), ord.end());

        cur_scc = 0;
        scc.assign(n, -1);
        for (auto v : ord) {
            if (scc[v] == -1) {
                dfs_scc(v);
                cur_scc++;
            }
        }
        return scc;
    }
};
}
}

\center[]{<h2>Алгоритм Тарьяна</h2>}

\details[mode=main; summary=Теория] {
    Этот алгоритм очень похож по своей сути на поиск мостов в неориентированном графе. А именно, мы будем работать с деревом dfs, только в этот раз оно будет ориентированным.
    
    Сначала подробнее изучим, как выглядит дерево dfs у ориентированного графа. Нас интересует, какие в нём могут быть рёбра. Пронумеруем вершины в порядке их посещения dfs'ом. Тогда из вершины $v$ рёбра могут быть направлены либо в вершины её поддерева, либо в вершины с меньшим номером. Это следует из того, что если бы существовало ребро в вершину с большим номером, которая не принадлежит поддереву вершины $v$, то dfs должен был бы закончиться, не посетив всех соседей, чего не может быть.
    
    При поиске мостов, для каждого поддерева мы находили самое высокое ребро, исходящее из него. Сделаем здесь тоже самое: для поддерева вершины $v$ посчитаем значение $f_v$, равное минимальному значению $u$, что из поддерева вершины $v$ есть ребро, направленное в вершину $u$. Для простоты будем считать, что в графе есть ребро $v \to v$, что не повлияет на КСС, но зато сделает верным неравенство $f_v \le v$. Считаем, что вершины уже перенумерованы в порядке их посещения dfs'ом.
    
    При поиске мостов нас по сути интересовали вершины, у которых $f_v = v$, в этом и только в этом случае ребро из $v$ в предка являлось мостом. Здесь нас тоже будут интересовать именно такие вершины, только теперь это будет означать, что вершина $v$ является минимальной в своей КСС.
    
    \details[summary=Доказательство] {
        Это нетрудное следствие того, какие рёбра могут быть в дереве dfs. Поскольку $f_v=v$ \implies из этого поддерева не может быть исходящих рёбер в вершины вне этого поддерева. А значит вся КСС этой вершины содержится в поддереве вершины $v$. А так как вершина $v$ минимальная в своём поддереве \implies она минимальная и в своей КСС.\qed
    }
    
    К сожалению в этом случае не верно обратное утверждение, что если вершина $v$ минимальная в своей КСС, то $f_v = v$. Но оказывается, что если $f_v = v$ и это первая вершина, из которой вышел dfs (то есть минимальная по времени выхода), то всё её поддерево это и есть её КСС.
    
    \details[summary=Доказательство] {
        Докажем, что из каждой вершины этого поддерева, достижима вершина $v$. Этого достаточно для доказательства всего факта, так как мы уже доказали, что вершина $v$ минимальная в своей КСС, а из вершины $v$ достижимы все в её поддереве. Докажем это по порядку для всех вершин в порядке увеличения их номера.
        
        Пусть мы хотим доказать это для вершины $u$ и мы знаем, что это верно для всех вершин с номерами от $v$ до $u-1$. Так как $f_u < u$ \implies есть ребро из поддерева вершины $u$, ведущее в вершину, для которой мы уже доказали, что из неё достижима вершина $v$. Но так как из вершины $u$ достижимы все вершины её поддерева \implies из неё тоже достижима вершина $f_u$, а значит и вершина $v$.\qed
    }
    
    Это уже приводить нас к финальному алгоритму. Запустим dfs, и будем параллельно насчитывать значения $f_v$. Как только мы выходим из dfs и $f_v = v$, то найдена новая КСС: поддерево вершины $v$. После этого мы удаляем все вершины из этого поддерева из графа (то есть не будем учитывать их при дальнейшем вычислении $f_v$).
    
    Корректность этого алгоритма следует из того, что когда мы удаляем поддерево какой-то вершины, все значения $f_v$ остаются корректно посчитаны, так как до вершин с большим номером dfs ещё не дошёл, а на вершины с меньшим номером это поддерево никак не влияет. Таким образом, мы всегда будем находить вершину с минимальным временем выхода, для которой $f_v = v$ с учётом всех уже найденных КСС.
}

\details[mode=main; summary=Время работы] {
    При реализации будем поддерживать стек ещё не удалённых вершин в порядке возрастания их времени входа. Тогда при удалении поддерева, все его вершины находятся сверху стека и их можно выделять за \complexity$(n)$ суммарно.
    
    Такая реализация даёт \complexity$(n + m)$.
}

\details[mode=main; summary=Замечание] {
    Нетрудно видеть, что мы выделяли КСС от стоков к истокам, поэтому если $u$ достижима из $v$, то номер КСС вершины $u$ $\le$ номеру КСС вершины $v$. Это не очень логично с точки зрения порядков, поэтому я рекомендую перенумеровать все КСС в обратном порядке, чтобы неравенство заменялось на противоположное.
}

\details[mode=main; summary=Реализация] {
\code[language=C++] {
class strongly_connected_components {
private:
    int n;
    std::vector<std::vector<int>> g;

    int cur_id, cur_scc;
    std::vector<int> id, f, scc, st;

    void dfs(int v) {
        st.push_back(v);
        id[v] = f[v] = cur_id++;

        for (auto u : g[v]) {
            if (id[u] == -1) {
                dfs(u);
                f[v] = std::min(f[v], f[u]);
            } else if (scc[u] == -1) {
                f[v] = std::min(f[v], id[u]);
            }
        }

        if (id[v] == f[v]) {
            int u;
            do {
                u = st.back();
                st.pop_back();
                scc[u] = cur_scc;
            } while (u != v);
            cur_scc++;
        }
    }

public:
    strongly_connected_components(int n = 0) : n(n), g(n) {}

    // Adds directed edge (from -> to)
    void add(int from, int to) {
        g[from].push_back(to);
    }

    // Returns for each vertex the scc index from [0, number_of_scc).
    // If u is reachable from v, then scc_index[v] <= scc_index[u].
    std::vector<int> solve() {
        cur_id = cur_scc = 0;
        id.assign(n, -1);
        f.assign(n, -1);
        scc.assign(n, -1);

        for (int v = 0; v < n; v++) {
            if (id[v] == -1) {
                dfs(v);
            }
        }

        for (auto &x : scc) {
            x = cur_scc - 1 - x;
        }
        return scc;
    }
};
}
}

\center[]{<h2>Приложения</h2>}

\details[mode=main; summary=Пример использования] {
    Данный код для каждой вершины графа выводит номер её КСС.
\code[language=C++] {
#include <bits/stdc++.h>
using namespace std;

class strongly_connected_components {
private:
    int n;
    std::vector<std::vector<int>> g;

    int cur_id, cur_scc;
    std::vector<int> id, f, scc, st;

    void dfs(int v) {
        st.push_back(v);
        id[v] = f[v] = cur_id++;

        for (auto u : g[v]) {
            if (id[u] == -1) {
                dfs(u);
                f[v] = std::min(f[v], f[u]);
            } else if (scc[u] == -1) {
                f[v] = std::min(f[v], id[u]);
            }
        }

        if (id[v] == f[v]) {
            int u;
            do {
                u = st.back();
                st.pop_back();
                scc[u] = cur_scc;
            } while (u != v);
            cur_scc++;
        }
    }

public:
    strongly_connected_components(int n = 0) : n(n), g(n) {}

    // Adds directed edge (from -> to)
    void add(int from, int to) {
        g[from].push_back(to);
    }

    // Returns for each vertex the scc index from [0, number_of_scc).
    // If u is reachable from v, then scc_index[v] <= scc_index[u].
    std::vector<int> solve() {
        cur_id = cur_scc = 0;
        id.assign(n, -1);
        f.assign(n, -1);
        scc.assign(n, -1);

        for (int v = 0; v < n; v++) {
            if (id[v] == -1) {
                dfs(v);
            }
        }

        for (auto &x : scc) {
            x = cur_scc - 1 - x;
        }
        return scc;
    }
};

int main() {
    cin.tie(nullptr)->sync_with_stdio(false);

    int n, m;
    cin >> n >> m;
    strongly_connected_components scc(n);
    while (m--) {
        int v, u;
        cin >> v >> u;
        scc.add(v - 1, u - 1);
    }

    for (auto x : scc.solve()) {
        cout << x << ' ';
    }
    cout << '\n';
}
}
}

\details[mode=main; summary=Задачи] {
    \details[summary=Задача про неравенства] {
        Есть $n$ переменных $x_1$, $x_2$, $\ldots$, $x_n$ и $q$ неравенств вида $x_i \le x_j$. Трубется найти максимальное количество различных значений среди этих переменных.
        
        Ожидаемое время работы: \complexity$(n + q)$.
        
        \details[summary=Решение] {
            Создадим граф из $n$ вершин. Для каждого неравенства $x_i \le x_j$ добавим ориентированное ребро из вершины $i$ в вершину $j$. Заметим, что если вершина $u$ достижима из вершины $v$, то $x_v \le x_u$, так как путь, соединяющий их соответствует какой-то неубывающей цепочке.
            
            Это значит, что значения всех переменных в одной КСС равны. С другой стороны, если в качестве этого значения мы возьмём номер этой КСС, найденный одним из этих алгоритмов, то все неравенства будут выполнены.
            
            А значит ответом на задачу будет количество КСС. Так как количество рёбер в этом графе равно $q$ такое решение будет работать за \complexity$(n + q)$.
        }
    }

    \details[summary=Задача про минимальный граф] {
        Дан ориентированный граф из $n$ вершин и $m$ рёбер. Требуется найти граф на $n$ вершинах с минимальным числом рёбер, что если вершина $u$ достижима из вершины $v$ в исходном графе, то она достижима из вершины $v$ в новом графе, и наоборот. Иными словами матрицы достижимости данных графов равны.
        
        Ожидаемое время работы: \complexity$(n^3)$, \complexity$(n^3 / W)$ или \complexity$(n^2 \log n)$.
        
        \details[summary=Решение] {
            Выделим КСС. Заметим, что они должны совпадать в обоих графах. Так же, нетрудно видеть, что КСС размера $k$ содержит хотя бы $k$ рёбер, поэтому во втором графе достаточно каждую КСС превратить в цикл, который как раз и будет содержать ровно $k$ рёбер.
            
            Теперь сожмём КСС. Мы свели задачу к ацикличному графу. Теперь давайте добавим в новый граф все рёбра $v \to u$, если не существует вершины $k$, что $k$ достижима из $v$ и $u$ достижима из $k$. Утверждается, что мы получим минимальный граф.
            
            \details[summary=Доказательство] {
                Нетудно видеть, что эти рёбра обязаны быть добавлены, в то время как их добавления достаточно для сохранения достижимости.\qed
            }
            
            Находить такие рёбра можно за любую из приведённых в условии асимптотик, используя Флойда, Флойда с битсетами или дерево доминаторов соответственно.
        }
    }
    
    \item[] {\link[href=https://atcoder.jp/contests/arc165/tasks/arc165_d]{Atcoder ARC165-D}}
    \item[] {\link[href=https://codeforces.com/contest/1534/problem/F2]{Codeforces 1534-F}}
    \item[] {\link[href=https://codeforces.com/contest/22/problem/E]{Codeforces 22-E}}
    \item[] {\link[href=https://codeforces.com/problemset/problem/427/C]{Codeforces 427-C}}
    \item[] {\link[href=https://codeforces.com/contest/1835/problem/D]{Codeforces 1835-D}}
    \item[] {\link[href=https://codeforces.com/contest/1835/problem/F]{Codeforces 1835-F}}
    \item[] {\link[href=https://contest.ucup.ac/contest/1865/problem/9810]{The 3rd Universal Cup. Stage 19: Shenyang. Задача M}}
}
